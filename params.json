{"name":"DictMySQL","tagline":"A MySQL class for more convenient database manipulation with Python dictionary.","body":"## Initialization\r\n#### Parameters:\r\n- **host**: _string_   \r\n- **user**: _string_   \r\n- **passwd**: _string_  \r\n- **db**: _string_  \r\n- **port**: _int, default 3306_  \r\n- **charset**: _string, default 'utf8'_  \r\n- **init_command**: _string, default 'SET NAMES UTF8'_  \r\n- **dictcursor**: _bool, default False_  \r\nWhen it is True, the connector uses DictCursor instead of regular cursor, so that all the return of SQL query will be wrapped in dict.   \r\n- **use_unicode**: _bool, default True_  \r\n\r\n#### Returns: \r\nDictMySQL object\r\n\r\n#### Example:\r\n```python\r\nfrom dictmysql import DictMySQL\r\nmysql = DictMySQL(db='occupation', host='127.0.0.1', user='root', passwd='')\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## select()\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **columns**: _list, default None_  \r\nBy default, it selects all columns.\r\n- **join**: _dict, default None_   \r\nSee [JOIN Syntax]() for more details.\r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax]() for more details.\r\n- **order**: _string, default None_   \r\n- **limit**: _int|list, default None_   \r\n\r\n#### Returns: \r\nThe result of SQL query.\r\n\r\n#### Examples:\r\n```python\r\nmysql.select(table='jobs', where={'value': 'Artist'})\r\n# SELECT * FROM `jobs` WHERE (`value` = \"Artist\");\r\n# Output: (5, )\r\n\r\nmysql.select(table='jobs', \r\n             columns=['jobs.id', 'profiles.id'], \r\n             join={'profile_jobs': {'jobs.id': 'profile_jobs.job_id'}, \r\n                   'profiles': {'profile_jobs.profile_id': 'profiles.id'}}, \r\n             where={'jobs.value': 'Artist'})\r\n# SELECT `jobs`.`id`, `profiles`.`id` FROM `jobs` \r\n# JOIN `profiles` ON `profile_jobs`.`profile_id`=`profiles`.`id` \r\n# JOIN `profile_jobs` ON `jobs`.`id`=`profile_jobs`.`job_id` \r\n# WHERE (`jobs`.`value` = \"Artist\");\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## get()\r\nA simplified method of select, for getting the first result in one column only. The result will not be wrapped in a tuple or dict, no matter which cursor is used. A common case of using this method is fetching the unique id with given condition.\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **column**: _string_  \r\n- **join**: _dict, default None_   \r\nSee [JOIN Syntax]() for more details.\r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax]() for more details.\r\n- **insert**: _bool, default False_   \r\nWhen it is True, insert the input condition if there is no result found and return the id of new row.\r\n- **ifnone**: _string, default None_   \r\nWhen it is not null, raise an error with the input string if there is no result found. Parameter insert will be unavailable in this situation.\r\n\r\n#### Returns: \r\nThe single result of SQL query.\r\n\r\n#### Examples:\r\n```python\r\nmysql.get(table='jobs', column='id', where={'value': 'Artist'})\r\n# SELECT `id` FROM `jobs` WHERE (`value` = \"Artist\") LIMIT 1;\r\n# Output: 5\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## insert()\r\n\r\n#### Parameters:\r\n\r\n- **table**: _string_   \r\n- **value**: _dict_  \r\n- **ignore**: _bool, default False_   \r\nAdd the IGNORE option into the insert statement.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe last inserted id.\r\n\r\n#### Examples:\r\n```python\r\nmysql.insert(table='jobs', value={'value': 'Programmer'})\r\n# INSERT INTO `jobs` (`value`) VALUES (\"Programmer\");\r\n```\r\n\r\n#### SQL Functions\r\nFor all SQL functions, add `#` before the function name and it will not be quoted or escaped.\r\n```python\r\nmysql.insert(table='jobs', value={'UID': '#UUID()', 'value': 'Programmer'})\r\n# INSERT INTO `jobs` (`UID`, `value`) VALUES (UUID(), \"Programmer\");\r\n```\r\n***\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}