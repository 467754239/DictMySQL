{"name":"DictMySQL","tagline":"A MySQL class for more convenient database manipulation with Python dictionary.","body":"## Initialization of DictMySQL()\r\n\r\n#### Parameters:\r\n- **host**: _string_   \r\n- **user**: _string_   \r\n- **passwd**: _string_  \r\n- **db**: _string_  \r\n- **port**: _int, default 3306_  \r\n- **charset**: _string, default 'utf8'_  \r\n- **init_command**: _string, default 'SET NAMES UTF8'_  \r\n- **dictcursor**: _bool, default False_  \r\nWhen it is True, the connector uses DictCursor instead of regular cursor, so that all the return of SQL query will be wrapped in dict.   \r\n- **use_unicode**: _bool, default True_  \r\n\r\n#### Returns: \r\nDictMySQL object\r\n\r\n#### Example:\r\n```python\r\nfrom dictmysql import DictMySQL\r\nmysql = DictMySQL(\r\n    db='occupation', \r\n    host='127.0.0.1', \r\n    user='root', \r\n    passwd=''\r\n)\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## select()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **columns**: _list, default None_  \r\nBy default, it selects all columns.\r\n- **join**: _dict, default None_   \r\nSee [JOIN Syntax](#join-syntax) for more details.\r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **order**: _string, default None_   \r\n- **limit**: _int|list, default None_   \r\n\r\n#### Returns: \r\nThe result of SQL query.\r\n\r\n#### Examples:\r\n```python\r\nmysql.select(\r\n    table='jobs', \r\n    where={'value': 'Artist'}\r\n)\r\n# SELECT * FROM `jobs` WHERE (`value` = \"Artist\");\r\n# Output: (5, )\r\n\r\n\r\nmysql.select(\r\n    table='jobs', \r\n    columns=['jobs.id', 'profiles.id'], \r\n    join={'profile_jobs': {'jobs.id': 'profile_jobs.job_id'}, \r\n          'profiles': {'profile_jobs.profile_id': 'profiles.id'}}, \r\n    where={'jobs.value': 'Artist'}\r\n)\r\n# SELECT `jobs`.`id`, `profiles`.`id` FROM `jobs` \r\n# JOIN `profile_jobs` ON `jobs`.`id`=`profile_jobs`.`job_id` \r\n# JOIN `profiles` ON `profile_jobs`.`profile_id`=`profiles`.`id` \r\n# WHERE (`jobs`.`value` = \"Artist\");\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## get()\r\nA simplified method of select(), for getting one result in a single column. It can insert the condition as a new record when there is no result found. The result will not be wrapped in a tuple or dict, no matter which cursor is being used. A common case of using this method is fetching the unique id with given condition.\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **column**: _string_  \r\n- **join**: _dict, default None_   \r\nSee [JOIN Syntax](#join-syntax) for more details.\r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **insert**: _bool, default False_   \r\nWhen it is True, insert the input condition if there is no result found and return the id of new row.\r\n- **ifnone**: _string, default None_   \r\nWhen it is not null, raise an error with the input string if there is no result found. Parameter insert will be unavailable in this situation.\r\n\r\n#### Returns: \r\nThe single result of SQL query.\r\n\r\n#### Examples:\r\n```python\r\nmysql.get(\r\n    table='jobs', \r\n    column='id', \r\n    where={'value': 'Artist'}\r\n)\r\n# SELECT `id` FROM `jobs` WHERE (`value` = \"Artist\") LIMIT 1;\r\n# Output: 5\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## insert()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **value**: _dict_  \r\n- **ignore**: _bool, default False_   \r\nAdd the IGNORE option into the insert statement.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe last inserted id.\r\n\r\n#### Examples:\r\n```python\r\nmysql.insert(\r\n    table='jobs', \r\n    value={'value': 'Programmer'}\r\n)\r\n# INSERT INTO `jobs` (`value`) VALUES (\"Programmer\");\r\n```\r\n\r\n#### SQL Functions\r\nFor all SQL functions, add `#` before the function name and it will not be quoted or escaped.\r\n```python\r\nmysql.insert(table='jobs', \r\n             value={'UID': '#UUID()', 'value': 'Programmer'})\r\n# INSERT INTO `jobs` (`UID`, `value`) VALUES (UUID(), \"Programmer\");\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## insertmany()\r\nInsert multiple values in one statement. SQL function is not supported in this method.\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **columns**: _list_   \r\nColumn names need to be specified when inserting multiple values.\r\n- **value**: _list|tuple_  \r\n- **ignore**: _bool, default False_   \r\nAdd the IGNORE option into the insert statement.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe last inserted id.\r\n\r\n#### Examples:\r\n```python\r\nmysql.insertmany(\r\n    table='jobs', \r\n    columns=['value', 'available'], \r\n    value=(('Programmer', 'yes'), ('Manager', 'no')\r\n)\r\n# INSERT INTO `jobs` (`value`) VALUES (\"Programmer\", \"yes\"), (\"Manager\", \"no\");\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n## upsert()\r\nUpdate or insert the values with \"ON DUPLICATE KEY UPDATE\" syntax. Unique index is required for at least one of the columns.\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **value**: _dict_  \r\n- **update_columns**: _list, default None_   \r\nSpecify the columns which will be updated if record exists. If it is None, all the columns in value will be update if possible.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe last inserted id.\r\n\r\n#### Examples:\r\n```python\r\nmysql.upsert(\r\n    table='jobs', \r\n    value={'id': 5, 'value': 'Artist'}\r\n)\r\n# INSERT INTO `jobs` (`id`, `value`) VALUES (5, Artist) \r\n# ON DUPLICATE KEY UPDATE `id`=VALUES(`id`), `value`=VALUES(`value`);\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## update()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **value**: _dict_  \r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe number of effected rows.\r\n\r\n#### Examples:\r\n```python\r\nmysql.update(\r\n    table='jobs', \r\n    value={'value': 'Artist'},\r\n    where={'id': 3}\r\n)\r\n# UPDATE `jobs` SET `value` = \"Artist\" WHERE (`id` = 3);\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## delete()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe number of effected rows.\r\n\r\n#### Examples:\r\n```python\r\nmysql.delete(\r\n    table='jobs', \r\n    where={'id': 3}\r\n)\r\n# DELETE FROM `jobs` WHERE (`id` = 3);\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## now()\r\n```python\r\nmysql.now()\r\n# SELECT NOW() AS now;\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## query()\r\nRun customized SQL query. Just like PyMySQL and MySQLdb, use fetchall() or fetchone() method to fetch the results.\r\n#### Parameters:\r\n- **sql**: _string_   \r\n- **args**: _tuple|list, default None_ \r\n#### Examples:\r\n```python\r\nmysql.query(\"SELECT * from jobs where value = %s\", ('manager',))\r\nresult = mysql.fetchall()\r\nprint(result)\r\n# Output: ((10, \"Manager\"),)\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n## WHERE Syntax\r\nDictMySQL provides a powerful WHERE syntax parser, transforming conditions from dict into SQL query.\r\n\r\n#### Simple Examples:\r\n```python\r\nmysql.select(\r\n    table='jobs', \r\n    where={'id': 5, \r\n           'value': 'Artist'}\r\n)\r\n# SELECT * FROM `jobs` WHERE (`id` = 5) AND (`value` = \"Artist\");\r\n\r\n\r\nmysql.select(\r\n    table='jobs', \r\n    where={'$>=': {'id': 5}, \r\n           '$LIKE': {'value': 'Art%'}}\r\n)\r\n# SELECT * FROM `jobs` WHERE (`id` >= 5) AND (`value` LIKE \"Art%\");\r\n\r\n\r\nmysql.select(\r\n    table='jobs', \r\n    where={'$OR': [{'id': 5}, {'id': 10}, {'$IN': ['Programmer', 'Manager']}]}\r\n)\r\n# SELECT * FROM `jobs` WHERE ((`id` = 5) OR (`id` = 10) OR (`value` IN (\"Programmer\", \"Manager\")));\r\n```\r\n\r\n\r\n\r\n\r\n## JOIN Syntax","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}