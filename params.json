{"name":"DictMySQL","tagline":"A MySQL class for more convenient database manipulation with Python dictionary.","body":"## Installation\r\n```bash\r\npip install dictmysql\r\n```\r\n\r\n## Initialization of DictMySQL()\r\n\r\n#### Parameters:\r\n- **host**: _string_   \r\n- **user**: _string_   \r\n- **passwd**: _string_  \r\n- **db**: _string_  \r\n- **port**: _int, default 3306_  \r\n- **charset**: _string, default 'utf8'_  \r\n- **init_command**: _string, default 'SET NAMES UTF8'_  \r\n- **dictcursor**: _bool, default False_  \r\nWhen it is True, the connector uses DictCursor instead of regular cursor, so that all the return of SQL query will be wrapped in dict.   \r\n- **use_unicode**: _bool, default True_  \r\n\r\n#### Returns: \r\nDictMySQL object\r\n\r\n#### Example:\r\n```python\r\nfrom dictmysql import DictMySQL\r\nmysql = DictMySQL(db='occupation', \r\n                  host='127.0.0.1', \r\n                  user='root', \r\n                  passwd='')\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## select()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **columns**: _list, default None_  \r\nBy default, it selects all columns.\r\n- **join**: _dict, default None_   \r\nSee [JOIN Syntax](#join-syntax) for more details.\r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **order**: _string, default None_   \r\n- **limit**: _int|list, default None_   \r\n\r\n#### Returns: \r\nThe result of SQL query.\r\n\r\n#### Examples:\r\n```python\r\nmysql.select(table='jobs', \r\n             where={'value': 'Artist'})\r\n# SELECT * FROM `jobs` WHERE (`value` = \"Artist\");\r\n# Output: (5, )\r\n\r\n\r\nmysql.select(table='jobs', \r\n             where={'jobs.value': 'Artist'},\r\n             order='id DESC',\r\n             limit=[2, 10])\r\n# SELECT * FROM `jobs` WHERE (`jobs`.`value` LIKE \"Artist\") ORDER BY `id` DESC LIMIT 2, 10;\r\n# Parameter limit not only accept int, but also list value if there is offset.\r\n```\r\n\r\n#### SQL Functions\r\nFor all SQL functions, add a `#` before the column name or function name, and the value will not be quoted or escaped.\r\n```python\r\nmysql.select(table='jobs', columns=['#min(id)', 'value'], where={'value': {'$LIKE': 'Art%'}})\r\n# SELECT min(id), `value` FROM `profile_job` WHERE (`value` LIKE Art%);\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## get()\r\nA simplified method of select(), for getting one result in a single column. It can insert the condition as a new record when there is no result found. The result will not be wrapped in a tuple or dict, no matter which cursor is being used. A common case of using this method is fetching the unique id with given condition.\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **column**: _string_  \r\n- **join**: _dict, default None_   \r\nSee [JOIN Syntax](#join-syntax) for more details.\r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **insert**: _bool, default False_   \r\nWhen it is True, insert the input condition if there is no result found and return the id of new row.\r\n- **ifnone**: _string, default None_   \r\nWhen it is not null, raise an error with the input string if there is no result found. Parameter insert will be unavailable in this situation.\r\n\r\n#### Returns: \r\nThe single result of SQL query.\r\n\r\n#### Examples:\r\n```python\r\nmysql.get(table='jobs', \r\n          column='id', \r\n          where={'value': 'Artist'})\r\n# SELECT `id` FROM `jobs` WHERE (`value` = \"Artist\") LIMIT 1;\r\n# Output: 5\r\n```\r\n\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## insert()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **value**: _dict_  \r\n- **ignore**: _bool, default False_   \r\nAdd the IGNORE option into the insert statement.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe last inserted id.\r\n\r\n#### Examples:\r\n```python\r\nmysql.insert(table='jobs', \r\n             value={'value': 'Programmer'})\r\n# INSERT INTO `jobs` (`value`) VALUES (\"Programmer\");\r\n```\r\n\r\n#### SQL Functions\r\nFor all SQL functions, add a `#` before the column name and its value will not be quoted or escaped.\r\n```python\r\nmysql.insert(table='jobs', \r\n             value={'#UID': 'UUID()', 'value': 'Programmer'})\r\n# INSERT INTO `jobs` (`UID`, `value`) VALUES (UUID(), \"Programmer\");\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## insertmany()\r\nInsert multiple values in one statement. SQL function is not supported in this method.\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **columns**: _list_   \r\nColumn names need to be specified when inserting multiple values.\r\n- **value**: _list|tuple_  \r\n- **ignore**: _bool, default False_   \r\nAdd the IGNORE option into the insert statement.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe last inserted id.\r\n\r\n#### Examples:\r\n```python\r\nmysql.insertmany(table='jobs', \r\n                 columns=['value', 'available'], \r\n                 value=(('Programmer', 'yes'), ('Manager', 'no'))\r\n# INSERT INTO `jobs` (`value`) VALUES (\"Programmer\", \"yes\"), (\"Manager\", \"no\");\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n## upsert()\r\nUpdate or insert the values with \"ON DUPLICATE KEY UPDATE\" syntax. Unique index is required for at least one of the columns.\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **value**: _dict_  \r\n- **update_columns**: _list, default None_   \r\nSpecify the columns which will be updated if record exists. If it is None, all the columns in value will be update if possible.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe last inserted id.\r\n\r\n#### Examples:\r\n```python\r\nmysql.upsert(table='jobs', \r\n             value={'id': 5, 'value': 'Artist'})\r\n# INSERT INTO `jobs` (`id`, `value`) VALUES (5, Artist) \r\n# ON DUPLICATE KEY UPDATE `id`=VALUES(`id`), `value`=VALUES(`value`);\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## update()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **value**: _dict_  \r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe number of effected rows.\r\n\r\n#### Examples:\r\n```python\r\nmysql.update(table='jobs', \r\n             value={'value': 'Artist'},\r\n             where={'id': 3})\r\n# UPDATE `jobs` SET `value` = \"Artist\" WHERE (`id` = 3);\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## delete()\r\n\r\n#### Parameters:\r\n- **table**: _string_   \r\n- **where**: _dict, default None_   \r\nSee [WHERE Syntax](#where-syntax) for more details.\r\n- **commit**: _bool, default True_   \r\nWhether to commit the statement.\r\n\r\n#### Returns: \r\nThe number of effected rows.\r\n\r\n#### Examples:\r\n```python\r\nmysql.delete(table='jobs', where={'id': 3})\r\n# DELETE FROM `jobs` WHERE (`id` = 3);\r\n\r\n\r\n\r\nmysql.delete(table='jobs', where={'id': 3}, commit=False)\r\n# Do something else\r\nmysql.commit()\r\n# Commit all statements above\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## query()\r\nRun customized SQL query. Just like PyMySQL and MySQLdb, use fetchall() or fetchone() method to fetch the results.\r\n\r\n#### Parameters:\r\n- **sql**: _string_   \r\n- **args**: _tuple|list, default None_\r\n\r\n#### Examples:\r\n```python\r\nmysql.query(\"SELECT * from jobs where value = %s\", ('manager',))\r\nresult = mysql.fetchall()\r\nprint(result)\r\n# Output: ((10, \"Manager\"),)\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## now()\r\n```python\r\nmysql.now()\r\n# SELECT NOW() AS now;\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## last_insert_id()\r\nFetching the id of last inserted row.\r\n```python\r\nmysql.last_insert_id()\r\n# SELECT LAST_INSERT_ID() AS lid;;\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n\r\n## WHERE Syntax\r\nDictMySQL provides a powerful WHERE syntax parser, transforming conditions from dict into SQL query.\r\n\r\n#### Simple Examples:\r\n```python\r\nwhere = {'id': 5, 'value': 'Artist'}\r\n# WHERE (`id` = 5) AND (`value` = \"Artist\")\r\n# The default operator is \"=\".\r\n\r\nwhere = {\r\n    '$>=': {\r\n        'id': 5\r\n    },\r\n    '$LIKE': {\r\n        'value': 'Art%'\r\n    }\r\n}\r\n# WHERE (`id` >= 5) AND (`value` LIKE \"Art%\")\r\n# The default logic operator is \"AND\".\r\n\r\n\r\nwhere = {\r\n    '$OR': [\r\n        {\r\n            'id':\r\n                [\r\n                    5, 10\r\n                ]\r\n        },\r\n        {\r\n            '$IN': {\r\n                'value': [\r\n                    'Programmer', 'Manager'\r\n                ]\r\n            }\r\n        }\r\n    ]\r\n}\r\n# WHERE ((`id` IN (5, 10)) OR (`value` IN (\"Programmer\", \"Manager\")));\r\n# The default operator is \"IN\" if the end value is a list.\r\n```\r\nList of operators:\r\n- **$=** or **$EQ**\r\n- **$<** or **$LT**\r\n- **$<=** or **$LTE**\r\n- **$>** or **$GT**\r\n- **$>=** or **$GTE**\r\n- **$<>** or **$NE**\r\n- **$LIKE**\r\n- **$BETWEEN**\r\n- **$IN**\r\n\r\nOperators are case-insensitive.\r\n\r\n#### Some More Examples:\r\n```python\r\nwhere = {\r\n    'id': {\r\n        '$BETWEEN': [\r\n            5, 10\r\n        ]\r\n    }\r\n}\r\n# WHERE (`id` BETWEEN 5 AND 10)\r\n# Between operator only takes the first two values to build the statement.\r\n\r\n\r\nwhere = {\r\n    '$AND': [\r\n        {\r\n            '$>': {\r\n                'id': 5\r\n            }\r\n        },\r\n        {\r\n            'id': {\r\n                '$<': 10\r\n            }\r\n        }\r\n    ]\r\n}\r\n# WHERE ((`id` > 5) AND (`id` < 10))\r\n# Switching the position of operator and column name is also acceptable.\r\n```\r\n\r\n#### $NOT operator\r\n```python\r\nwhere = {\r\n    '$NOT': {\r\n        '$AND': [\r\n            {\r\n                '$>': {\r\n                    'id': 5\r\n                }\r\n            },\r\n            {\r\n                'id': {\r\n                    '$<': 10\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n# WHERE ((`id` <= 5) OR (`id` >= 10))\r\n# A $NOT operator will reverse the meaning of whole operator chain. \r\n# In the example above, $AND -> $OR and $< -> $>=.\r\n```\r\n\r\n```python\r\n# Note that switching the position of $NOT and other operators might cause ambiguity. \r\n# It might reverse the whole operator chain or the single operator only, which will \r\n# be confusing since it can't be distinguished from the input JSON. So we define：\r\n# Reverse the logic operator, if $NOT is parent node and the related operator is child node.\r\n# Example, (not (A and B)): \r\nwhere = {\r\n    '$NOT': {\r\n        '$AND': [\r\n            {\r\n                '$LIKE': {\r\n                    'name': 'David%'\r\n                }\r\n            },\r\n            {\r\n                '$LIKE': {\r\n                    'name': '%Lee'\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n# (`name` NOT LIKE 'David%') OR (`name` NOT LIKE '%Lee')\r\n\r\n\r\n# Keep the logic operator, if $NOT is child node and operator is parent node.\r\n# Example, ((not A) and (not B)): \r\nwhere = {\r\n    'name': {\r\n        '$AND': [\r\n            {\r\n                '$NOT': {\r\n                    '$LIKE': 'David%'\r\n                }\r\n            },\r\n            {\r\n                '$NOT': {\r\n                    '$LIKE': '%Lee'\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n# (`name` NOT LIKE 'David%') AND (`name` NOT LIKE '%Lee')\r\n```\r\n\r\n#### Compound logic operator\r\n```python\r\nwhere = {\r\n    '$AND': [\r\n        {\r\n            '$OR': [\r\n                {\r\n                    'id': 5\r\n                }, \r\n                {\r\n                    'id': 10\r\n                }\r\n            ]\r\n        }, \r\n        {\r\n            '$LIKE': {\r\n                'value': 'Art%'\r\n            }\r\n        }\r\n    ]\r\n}\r\n# WHERE (((`id` = 5) OR (`id` = 10)) AND (`value` LIKE \"Art%\"))\r\n```\r\n\r\n#### SQL Functions\r\nFor all SQL functions, add a `#` before the column name and its value will not be quoted or escaped.\r\n```python\r\nwhere = {\r\n    '#created': {\r\n        '$=': 'date(now())'\r\n    }\r\n}\r\n# WHERE (`created` = date(now()))\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## JOIN Syntax\r\nDictMySQL provides simple symbolic syntax for joining tables.\r\n\r\nList of join types:\r\n- **>**: LEFT JOIN\r\n- **<**: RIGHT JOIN\r\n- **<>**: FULL JOIN\r\n- **><**: INNER JOIN\r\n\r\n#### Examples:\r\n```python\r\nmysql.select(table='jobs', \r\n             join={\r\n                 '[>]profile_job': {\r\n                     'jobs.id': 'profile_job.job_id'\r\n                 }\r\n             })\r\n# SELECT * FROM `jobs` LEFT JOIN `profile_job` ON `jobs`.`id`=`profile_job`.`job_id`;\r\n\r\nmysql.select(table='jobs', \r\n             join={\r\n                 'profile_job': {\r\n                     'jobs.id': 'profile_job.job_id'\r\n                 }\r\n             })\r\n# SELECT * FROM `jobs` JOIN `profile_job` ON `jobs`.`id`=`profile_job`.`job_id`;\r\n# INNER JOIN by default\r\n```\r\n\r\n#### Alias\r\nBoth of the parameter table and join support alias.\r\n```python\r\nmysql.select(table='jobs(j)',\r\n             columns=['j.value', 'p.value'],\r\n             join={\r\n                 '[<>]profile_job(pj)': {\r\n                     'j.id': 'pj.job_id'\r\n                 },\r\n                 '[<>]profile(p)': {\r\n                     'pj.profile_id': 'p.id'\r\n                 }\r\n             })\r\n# SELECT `j`.`value`, `p`.`value` FROM `jobs` AS `j` \r\n# FULL JOIN `profile` AS `p` ON `pj`.`profile_id`=`p`.`id` \r\n# FULL JOIN `profile_job` AS `pj` ON `j`.`id`=`pj`.`job_id`;\r\n\r\n\r\n# When performing self join, the joined table should be assigned different alias, \r\n# otherwise they will have the same key.\r\nmysql.select(table='profile_job(pj)',\r\n             join={\r\n                 'profile_job(pj2)': {\r\n                     'pj.id': 'pj1.id_2'\r\n                 },\r\n                 'profile_job(pj3)': {\r\n                     'pj.id': 'pj2.id_3'\r\n                 }\r\n             })\r\n# SELECT * FROM `profile_job` AS `pj` \r\n# JOIN `profile_job` AS `pj2` ON `pj`.`id`=`pj2`.`id_2` \r\n# JOIN `profile_job` AS `pj3` ON `pj`.`id`=`pj3`.`id_3`;\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n\r\n## Reconnect\r\nDictMySQL provides reconnect method allowing user to reconnect to MySQL manually.\r\n```python\r\nmysql = DictMySQL(db='occupation', \r\n                  host='127.0.0.1', \r\n                  user='root', \r\n                  passwd='')\r\nmysql.now()\r\n# Wait a long time and MySQL server has gone away\r\nmysql.reconnect()\r\nmysql.now()\r\n# Works again\r\n```\r\n***\r\n\r\n\r\n\r\n\r\n## Debug\r\nBy setting `DictMySQL.debug = True`, all the query methods excluding query() will print the SQL query without running it. Under current version it will not print the quotation mark.\r\n```python\r\nmysql.debug = True\r\nmysql.select(table='jobs', \r\n             where={'value': 'Artist'})\r\n# Output: 'SELECT * FROM `jobs` WHERE (`value` = Artist);'\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}